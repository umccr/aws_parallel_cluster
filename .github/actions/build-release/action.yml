name: build-release

inputs:
  git_tag:
    description: name of the release tag
    required: true

description: |
  Set the version of AWS Parallel Cluster version in the conda env yaml file
  Set the version of the release in version.
  Add necessary files to zip file.

runs:
  using: "composite"
  steps:
    - id: get-nonlatest-git-tag
      shell: bash
      env:
        git_tag: ${{ inputs.git_tag }}
      run: |
        # Show running through script
        set -euxo pipefail
        # Get git commit id
        commit_id="$(git show-ref --tags "${git_tag}" | {
                     cut -d' ' -f1
                    })"

        # Now get git tag from commit id if it isn't 'latest'
        git_tag_non_latest="$(git show-ref | {
                              # Collect the tags on the commit id connected to 'latest'
                              grep "${commit_id}"
                             } | {
                              # Filter out heads/remotes, only want the tags
                              grep "refs/tags"
                             } | {
                              # Filter out 'latest' tag, should just be the release left
                              grep -v "refs/tags/latest"
                             } | {
                              # Now get the name of the release
                              cut -d' ' -f2
                             })"
        git_tag_non_latest="$(basename "${git_tag_non_latest}")"

        # Set git tag as output for this step
        echo "::set-output name=git_tag_non_latest::${git_tag_non_latest}"
    - id: update-python-alternatives
      shell: bash
      run: |
        # Show running through script
        set -euxo pipefail
        # Basic updates / ensure pip is installed
        sudo apt-get update -y -qq
        # Order of positional parameters below is
        # <link> is the symlink pointing to /etc/alternatives/<name>.
        #   (e.g. /usr/bin/pager)
        # <name> is the master name for this link group.
        #   (e.g. pager)
        # <path> is the location of one of the alternative target files.
        #   (e.g. /usr/bin/less)
        # <priority> is an integer; options with higher numbers have higher priority in
        #   automatic mode.
        sudo update-alternatives --quiet --install \
          /usr/bin/python python /usr/bin/python3 10
    - id: install-semantic-version-from-pip
      shell: bash
      run: |
        # Show running through script
        set -euxo pipefail
        # Basic updates / ensure pip is installed
        sudo apt-get update -y -qq
        sudo apt-get install -y -qq \
          python3-pip
        # Install semantic_version through pip
        pip3 install --quiet semantic_version
    - id: get-aws-parallel-cluster-version
      shell: python
      env:
        GIT_TAG: ${{ steps.get-nonlatest-git-tag.outputs.git_tag_non_latest }}
      run: |
        # Imports
        import sys
        import os
        import semantic_version

        # Get env vars
        git_tag = os.environ["GIT_TAG"]

        if git_tag is None or git_tag == "":
          sys.exit(1)

        # Strip 'pre-' from left side
        # "pre-v2.9.1-1.0.2" -> "v2.9.1-1.0.2"
        git_tag = git_tag.lstrip("pre-")

        # Now we have <aws cluster version>-<build-version>
        parallel_cluster_version = git_tag.split("-", 1)[0]
        # "v2.9.1-1.0.2" -> "v2.9.1"

        # Strip the 'v' prefix
        parallel_cluster_version = parallel_cluster_version.lstrip("v")

        # Validate pcluster-version through semantic_version.validate
        if not semantic_version.validate(parallel_cluster_version):
            print("\"{}\" failed the semantic version test - "
                  "ensure parallel cluster version tag is correct".format(parallel_cluster_version))
            sys.exit(1)

        # Return the aws parallel cluster version value
        print("::set-output name=aws_parallel_cluster_version::{}".format(parallel_cluster_version))
    - id: build-release
      shell: bash
      env:
        AWS_PARALLEL_CLUSTER_VERSION: ${{ steps.get-aws-parallel-cluster-version.outputs.aws_parallel_cluster_version }}
        NON_LATEST_PCLUSTER_VERSION: ${{ steps.get-nonlatest-git-tag.outputs.git_tag_non_latest }}
      run: |
        # Show running of script
        set -euxo pipefail

        # Install commands
        sudo apt-get update -y -qq
        sudo apt-get install -y -qq \
          rsync \
          zip

        # Create release dir
        mkdir -p "release-${{ inputs.git_tag }}"

        # Create subdirs too, as present on GitHub
        mkdir -p "release-${{ inputs.git_tag }}/conf"
        mkdir -p "release-${{ inputs.git_tag }}/bin"
        mkdir -p "release-${{ inputs.git_tag }}/lib"

        # Add scripts
        rsync --archive \
          --include='*.py' --exclude='*' \
          "bin/" "release-${{ inputs.git_tag }}/bin/"

        # Add libraries
        rsync --archive \
          --include="*.py" --exclude='*' \
          "bin/umccr_utils/" "release-${{ inputs.git_tag }}/lib/umccr_utils/"

        # Update version.py for release
        sed -i "s/__VERSION__/${NON_LATEST_PCLUSTER_VERSION}/" \
          "release-${{ inputs.git_tag }}/lib/umccr_utils/version.py"

        # Add conda-env yaml
        cp conf/pcluster-env.yaml "release-${{ inputs.git_tag }}/conf/pcluster-env.yaml"

        # Update conda-env.yaml aws parallel cluster version
        sed -i "s/__AWS_PARALLEL_CLUSTER_VERSION__/${AWS_PARALLEL_CLUSTER_VERSION}/" \
          "release-${{ inputs.git_tag }}/conf/pcluster-env.yaml"

        # Add installation script
        cp install.sh "release-${{ inputs.git_tag }}/install.sh"

        # Make install.sh an executable
        chmod +x "release-${{ inputs.git_tag }}/install.sh"

        # Create zip file
        zip -q -r "release-${{ inputs.git_tag }}.zip" "release-${{ inputs.git_tag }}"
